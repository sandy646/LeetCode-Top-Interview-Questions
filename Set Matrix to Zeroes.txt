Solution 1 ->

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
        int rows = matrix.size();
        int cols = matrix[0].size();
        
        
        vector<bool> row (rows, 0);
        vector<bool> col (cols, 0);
        
        for(int i = 0; i < rows; i++)
        {
            for(int j = 0; j < cols; j++)
            {
                
                if(matrix[i][j] == 0)
                {
                    row[i] = true;
                    col[j] = true;
                }
                
            }
        }
        
        for(int i = 0; i < rows; i++)
        {
            if(row[i])
            {
                for(int j = 0; j < cols; j++)
                    matrix[i][j] = 0;
            }
        }
        
        for(int i = 0; i < cols; i++)
        {
            if(col[i])
            {
                for(int j = 0; j < rows; j++)
                    matrix[j][i] = 0;
            }
        }
    }
};

Time Complexity -> O(m*n) where m and n are rows and columns of given matrix respectively.
Space Complexity -> O(m + n) because we have used two vectors of length m and n.

Solution 2(Efficient Solution) ->

class Solution {
public:
    void setZeroes(vector<vector<int>>& matrix) {
        
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        int rows = matrix.size();
        int cols = matrix[0].size();
        int first_col = 0;
        //cout<<"Start"<<endl;
        for(int i = 0; i < rows; i++)
        {
            //cout<<"I = "<<i<<endl;
            if(matrix[i][0] == 0)
                first_col = 1;
            for(int j = 1; j < cols; j++)
            {
                //cout<<"J = "<<j<<endl;
                if(matrix[i][j] == 0)
                {
                    matrix[0][j] = 0;
                    matrix[i][0] = 0;
                }
            }
        }
        //cout<<"between"<<endl;
        for(int i = 1; i < rows; i++)
        {
            for(int j = 1; j < cols; j++)
            {
                if(matrix[i][0] == 0 || matrix[0][j] == 0)
                    matrix[i][j] = 0;
                
            }
        }
        //cout<<"last"<<endl;
        if(matrix[0][0] == 0)
        {
            for(int i = 0; i < cols; i++)
                matrix[0][i] = 0;
        }
        
        if(first_col)
        {
            for(int i = 0; i < rows; i++)
            {
                matrix[i][0] = 0;
            }
        }
    }
};

Time Complexity -> O(m*n)
Space Complexity -> O(1)

