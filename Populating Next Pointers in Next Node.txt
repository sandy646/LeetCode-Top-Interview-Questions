/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() {}

    Node(int _val, Node* _left, Node* _right, Node* _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
public:
    Node* connect(Node* root) {
        
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);
        
        if(root == NULL)
            return NULL;
        
        queue<Node*> q;
        q.push(root);
        
        while(!q.empty())
        {
            int size = q.size();
            
            while(size--)
            {
                
                Node *temp = q.front();
                q.pop();
                
                if(size == 0)
                    temp->next = NULL;
                
                else
                    temp -> next = q.front();
                
                if(temp -> left)
                    q.push(temp -> left);
                
                if(temp -> right)
                    q.push(temp -> right);
                
                
            }
        }
        
        return root;
    }
};

Time Complexity -> O(n) - Because we are traversing all nodes of tree once.
Space Complexity -> O(n) - Because of queue.